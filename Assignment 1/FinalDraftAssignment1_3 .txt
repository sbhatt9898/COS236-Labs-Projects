import java.util.*;
import java.io.*;

public class FinalDraftAssignment1_3 {
  public static void main(String[] args) throws IOException {
    //Declarations 
    Scanner numberInput = new Scanner(System.in);
    boolean fileOpened = true;
    Scanner inputFile = null;
    int choiceAns = 0;
    
    String fileName;
    Scanner input = new Scanner(System.in);
    System.out.print("Enter file name: ");
    fileName = input.nextLine();
    System.out.println();
    //Try statement 
    try {
      inputFile = new Scanner(new File(fileName));
      final int MAXSIZE = 20;
      int[] s1Array = new int [MAXSIZE];
      
      {
        int count =0;
        while(count < MAXSIZE){
          if(inputFile.hasNextInt()){
            s1Array[count] = inputFile.nextInt();
          }
          //checks if there are any int in the file
          else if(count<1) {
            System.out.println("Files has no files. System exiting");
            System.exit(0);
          }
          else{
            inputFile.next();
          }
          count++;
        }
      }
      do {
        //call for menu
        menu();
        
        System.out.print("Please enter your option: ");      
        choiceAns = getInt(numberInput, "WRONG TYPE! Not an integer! REENTER: ");      
        int k;
        int numArray = 0;
        int[] sArray;
        //while loop for input validation 
        while(choiceAns < 0 || choiceAns > 6) {
          System.out.println("INVALID! Out of range! REENTER: ");           
          choiceAns = getInt(numberInput, "WRONG TYPE! Not an integer! REENTER: ");
        }  
        
        switch(choiceAns) {
          case 0:
            System.out.println("Testing complete. Exit program.");
            break;
          case 1:
            //Printing Orignal Array 
            System.out.print("The original list is: ");          
            print(s1Array);   
            // Call for shifting to left 1 position
            shiftLeft(s1Array);          
            System.out.println("The list after left rotation is: ");          
            print(s1Array);         
            break;
          case 2:             
            //Printing Orignal Array 
            System.out.println("The original list is: ");          
            print(s1Array);    
            // Asking for k
            System.out.print("Input k (step for shift left): ");          
            k = getInt(numberInput, "Not an integer! Try again!");          
            shiftLeft(s1Array,k);         
            // Call for shifting to left k position 
            System.out.println("The list after left rotation with " + k + " positions is: ");          
            print(s1Array);          
            break;
          case 3: 
            //Printing Orignal Array 
            System.out.println("The original list is: ");          
            print(s1Array);             
            int size = s1Array.length;
            // Asking for k
            System.out.print("Input k (step for shift left): ");          
            k = getInt(numberInput, "Not an integer! Try again!");          
            sArray = shiftLeftK(s1Array, size ,k);   
            // Call for shifting to left k position - copied 
            System.out.println("The list after left rotation with " + k + " positions is: ");          
            print(sArray);
            break;
          case 4:
            //Printing Orignal Array 
            System.out.println("The original list is: ");
            print(s1Array);
            // Call for shifting to left 1 position
            shiftRight(s1Array);
            System.out.println("The list after right rotation is: ");            
            print(s1Array);
            break;
          case 5:            
            //Printing Orignal Array 
            System.out.println("The original list is: ");         
            print(s1Array); 
            // Asking for k
            System.out.print("Input k (step for shift right): ");         
            k = getInt(numberInput, "Not an integer! Try again!");  
            // Call for shifting to right k position  
            shiftRight(s1Array,k);          
            System.out.println("The list after right rotation with " + k + " positions is: ");          
            print(s1Array);
            break;
          case 6:  
            //Printing Orignal Array 
            System.out.println("The original list is: ");
            print(s1Array);            
            size = s1Array.length;
            // Asking for k
            System.out.print("Input k (step for shift right): ");
            k = getInt(numberInput, "Not an integer! Try again!");   
            // Call for shifting to right k position - copied 
            sArray = shiftRightK(s1Array, size ,k); 
            System.out.println("The list after right rotation with " + k + " positions is: ");          
            print(sArray);
            break;
        }
      }
      while(choiceAns != 0);
    }    
    catch (FileNotFoundException e) 
    {
      System.out.println("--- File Not Found! ---");
      fileOpened = false; 
    }
  }
  //Method to print 
  public static void print(int[] theArray) {
    for(int i = 0; i < theArray.length; i++) {
      System.out.printf("%5d", theArray[i]);
    }
    System.out.println();
  }
  //Input Validation 
  public static int getInt(Scanner UserInput, String prompt){        
    while(!UserInput.hasNextInt()){
      System.out.println(prompt);
      UserInput.next();
    }        
    int number = UserInput.nextInt();        
    return number;
  } 
  //Main Method Menu 
  public static void menu() {
    System.out.println("Your options are: ");
    for(int i = 0; i <= 16; i++) {
      System.out.print("-");
    }
    System.out.println();
    System.out.printf("%19s%n", "1) Shift left");
    System.out.printf("%39s%n", "2) Shift left (k steps)/ in place");
    System.out.printf("%42s%n", "3) Shift left (k steps)/second array");
    System.out.printf("%20s%n", "4) Shift right");
    System.out.printf("%39s%n", "5) Shift right (k steps)/in place");
    System.out.printf("%43s%n", "6) Shift right (k steps)/second array");
    System.out.printf("%13s%n", "0) EXIT");
  }   
  // Method to shift left 1 position 
  public static void shiftLeft(int[] theArray) {
    int value = theArray[0];        
    int i;      
    for(i = 0; i < theArray.length-1; i++) {
      theArray[i] = theArray[i +1];
    }        
    theArray[i] = value;
  }  
  // Call for shifting to left k position 
  public static void shiftLeft(int[] theArray, int k) {
    for(int times = 1; times <= k; times++) {
      int i;
      int value = theArray[0];
      for(i = 0; i < theArray.length-1; i++) {
        theArray[i] = theArray[i+1];
      }
      theArray[i] = value;
    }
  }     
  // Call for shifting to left k position - copied
  public static int[] shiftLeftK(int [] theArray, int s ,int k) {   
    int[] sArray = new int[s];       
    for(int i = 0; i < s; i++) {
      sArray[i] = theArray[i];
    }       
    for(int times = 1; times <= k; times++) {
      int i;
      int value = sArray[0];
      for(i = 0; i < s-1; i++) {
        sArray[i] = sArray[i+1];
      }
      sArray[i] = value;
    }       
    return sArray;
  } 
  // Call for shifting to right 1 position
  public static void shiftRight(int [] a) {
    int j;
    int lastelement= a[a.length-1];       
    for(j=a.length-1;j>0;j--){
      a[j]= a[j-1];
    }
    a[0]=lastelement;
  }
  // Call for shifting to right k position
  public static void shiftRight(int [] a, int k) {
    for(int times=1;times<=k;times++){
      int j;
      int lastelement= a[a.length-1];
      
      for(j=a.length-1;j>0;j--){
        a[j]= a[j-1];
      }
      a[0]=lastelement;
    }
  } 
  // Call for shifting to right k position - copied
  public static int[]shiftRightK(int[]a, int s ,int k) {    
    int[]shiftRightK2= new int[s];       
    for(int i =0; i< s;i++){
      shiftRightK2[i] = a[i];
    }      
    for(int times=1;times<=k;times++){
      int j;
      int lastelement= shiftRightK2[s-1];     
      for(j=s-1;j>0;j--){
        shiftRightK2[j]= shiftRightK2[j-1];
      }
      shiftRightK2[0]=lastelement;
    }
    return  shiftRightK2;  
  }      
}
